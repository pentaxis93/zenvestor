import 'package:equatable/equatable.dart';
import 'package:fpdart/fpdart.dart';
import 'package:zenvestor_domain/zenvestor_domain.dart' as shared;

/// Stock entity within the server bounded context.
///
/// This entity wraps the shared domain Stock with infrastructure concerns
/// specific to the server context (persistence IDs, timestamps). It represents
/// the complete Stock concept as understood within the server's bounded
/// context, which includes both business attributes and persistence metadata.
///
/// Following DDD principles, this entity is named simply "Stock" within its
/// bounded context rather than "ServerStock", as the import path and context
/// make it clear this is the server's interpretation of the Stock concept.
class Stock extends Equatable {
  /// Creates a server domain Stock entity.
  ///
  /// All parameters are required as they represent the complete set of
  /// attributes for a Stock within the server context.
  const Stock({
    required this.id,
    required this.createdAt,
    required this.updatedAt,
    required this.sharedStock,
  });

  /// Creates a server domain Stock from a shared stock and infrastructure data.
  ///
  /// This factory constructor is a convenience method typically used by
  /// repositories when converting from persistence models.
  factory Stock.fromSharedStock({
    required String id,
    required DateTime createdAt,
    required DateTime updatedAt,
    required shared.Stock sharedStock,
  }) {
    return Stock(
      id: id,
      createdAt: createdAt,
      updatedAt: updatedAt,
      sharedStock: sharedStock,
    );
  }

  /// Unique identifier for the stock in the persistence layer.
  ///
  /// This is typically a UUID generated by the repository when the
  /// stock is first persisted.
  final String id;

  /// Timestamp when the stock was first created in the system.
  ///
  /// This value is set by the repository and should never change
  /// after initial creation.
  final DateTime createdAt;

  /// Timestamp when the stock was last updated.
  ///
  /// This value is managed by the repository and updated whenever
  /// the stock's attributes are modified.
  final DateTime updatedAt;

  /// The wrapped shared domain Stock containing business logic.
  final shared.Stock sharedStock;

  /// Delegates to the wrapped domain stock for ticker.
  shared.TickerSymbol get ticker => sharedStock.ticker;

  /// Delegates to the wrapped domain stock for name.
  Option<shared.CompanyName> get name => sharedStock.name;

  /// Delegates to the wrapped domain stock for SIC code.
  Option<shared.SicCode> get sicCode => sharedStock.sicCode;

  /// Delegates to the wrapped domain stock for grade.
  Option<shared.Grade> get grade => sharedStock.grade;

  /// Creates a copy of this Stock with the specified fields replaced.
  ///
  /// This method maintains immutability while allowing updates to both
  /// business attributes (via shared domain copyWith) and infrastructure
  /// attributes (specific to server context).
  Stock copyWith({
    String? id,
    DateTime? createdAt,
    DateTime? updatedAt,
    shared.TickerSymbol? ticker,
    Option<shared.CompanyName>? name,
    Option<shared.SicCode>? sicCode,
    Option<shared.Grade>? grade,
  }) {
    // If any business fields are being updated, create new shared stock
    final newSharedStock =
        (ticker != null || name != null || sicCode != null || grade != null)
            ? sharedStock.copyWith(
                ticker: ticker,
                name: name,
                sicCode: sicCode,
                grade: grade,
              )
            : sharedStock;

    return Stock(
      id: id ?? this.id,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      sharedStock: newSharedStock,
    );
  }

  @override
  List<Object?> get props => [
        // Include all properties for equality comparison
        id,
        createdAt,
        updatedAt,
        // Business properties via shared stock
        sharedStock,
      ];

  @override
  String toString() => 'Stock('
      'id: $id, '
      'ticker: ${ticker.value}, '
      'createdAt: $createdAt, '
      'updatedAt: $updatedAt'
      ')';
}
