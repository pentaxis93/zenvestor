# Lefthook configuration for Zenvestor
# Git hooks for code quality enforcement

# Output configuration to ensure error details are shown
output:
  - meta          # Print lefthook version
  - summary       # Print summary block
  - failure       # Print failed steps  
  - execution_out # Print command output (crucial for seeing errors)
  - execution_info # Print execution logs

pre-commit:
  parallel: false  # Run groups sequentially
  commands:
    # Auto-fix first
    01-auto-fix:
      run: |
        echo "🔧 Auto-fixing code issues..." && \
        # Get list of originally staged files
        staged_files=$(git diff --staged --name-only) && \
        # Run dart fix and format in parallel for both projects
        (cd zenvestor_server && dart fix --apply && dart format .) & \
        server_pid=$! && \
        (cd zenvestor_flutter && dart fix --apply && dart format .) & \
        flutter_pid=$! && \
        wait $server_pid && wait $flutter_pid && \
        # Re-stage only the originally staged files
        if [ -n "$staged_files" ]; then
          # Loop through staged files and re-add only those
          echo "$staged_files" | while IFS= read -r file; do
            if [ -f "$file" ]; then
              git add "$file"
            fi
          done
        fi && \
        echo "✅ Auto-fix and formatting complete"
      skip:
        - merge
        - rebase
    
    # Then analyze
    02-analyze:
      run: |
        echo "🔍 Analyzing code..."
        # Run analysis with fatal warnings to block on ANY issue
        server_output=$(cd zenvestor_server && dart analyze --fatal-infos --fatal-warnings 2>&1)
        server_exit=$?
        flutter_output=$(cd zenvestor_flutter && flutter analyze --fatal-infos --fatal-warnings 2>&1)
        flutter_exit=$?
        
        # Always show output
        echo "Analyzing zenvestor_server..."
        echo "$server_output"
        echo ""
        echo "Analyzing zenvestor_flutter..."
        echo "$flutter_output"
        
        # Parse and collect issues
        issues=""
        issue_count=0
        
        # Parse server issues
        if [ $server_exit -ne 0 ]; then
          server_issues=$(echo "$server_output" | grep -E "^\s*(error|warning|info)" | sed 's/^[[:space:]]*//' || true)
          if [ -n "$server_issues" ]; then
            issues="${issues}📦 zenvestor_server issues:\n$server_issues\n\n"
            issue_count=$((issue_count + $(echo "$server_issues" | wc -l)))
          fi
        fi
        
        # Parse flutter issues
        if [ $flutter_exit -ne 0 ]; then
          flutter_issues=$(echo "$flutter_output" | grep -E "^\s*(error|warning|info)" | sed 's/^[[:space:]]*//' || true)
          if [ -n "$flutter_issues" ]; then
            issues="${issues}📱 zenvestor_flutter issues:\n$flutter_issues\n"
            issue_count=$((issue_count + $(echo "$flutter_issues" | wc -l)))
          fi
        fi
        
        # Show summary if there are issues
        if [ $server_exit -ne 0 ] || [ $flutter_exit -ne 0 ]; then
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ ANALYSIS FAILED - Found $issue_count issue(s) that must be fixed:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo -e "$issues"
          echo "💡 Fix these issues before committing. For auto-fixable issues, run:"
          echo "   dart fix --apply (in the respective directory)"
          echo ""
          exit 1
        fi
        
        echo "✅ Analysis complete"
    
    # Parallel checks last
    03-parallel-checks:
      run: |
        echo "⚡ Phase 3: Parallel Checks" && \
        lefthook run parallel-checks


# Parallel group: all these can run simultaneously
parallel-checks:
  parallel: true
  commands:
    test-all:
      run: |
        echo "🧪 Running tests with coverage..." && \
        output=$(./scripts/test-coverage.sh) && \
        echo "$output" && \
        server_coverage=$(echo "$output" | grep "Server:" | grep -oE "[0-9]+(\.[0-9]+)?") && \
        flutter_coverage=$(echo "$output" | grep "Flutter:" | grep -oE "[0-9]+(\.[0-9]+)?") && \
        echo "" && \
        echo "Coverage threshold: 100%" && \
        echo "" && \
        # Check server coverage
        if [ $(echo "$server_coverage < 100" | bc -l) -eq 1 ]; then
          echo "❌ Server coverage ${server_coverage}% is below 100% threshold"
          exit 1
        else
          echo "✅ Server coverage ${server_coverage}% meets threshold"
        fi && \
        # Check flutter coverage
        if [ $(echo "$flutter_coverage < 100" | bc -l) -eq 1 ]; then
          echo "❌ Flutter coverage ${flutter_coverage}% is below 100% threshold"
          exit 1
        else
          echo "✅ Flutter coverage ${flutter_coverage}% meets threshold"
        fi && \
        echo "✅ All tests complete"
    
    trivy-scan:
      run: |
        echo "🛡️ Running Trivy security scan..." && \
        trivy fs . \
          --exit-code 1 \
          --severity CRITICAL,HIGH,MEDIUM,LOW \
          --format table && \
        echo "✅ Trivy scan complete - no vulnerabilities found"
    
    semgrep-scan:
      run: |
        echo "🔍 Running Semgrep SAST scan..." && \
        semgrep \
          --config=p/security-audit \
          --config=p/secrets \
          --config=p/owasp-top-ten \
          --autofix \
          --error && \
        git add -A && \
        echo "✅ Semgrep scan complete - security issues fixed"

# Pre-push hook to run tests with coverage before pushing
# Tests require database to be running via docker-compose
pre-push:
  parallel: false
  commands:
    test-coverage:
      run: |
        echo "🧪 Running tests with coverage..." && \
        output=$(./scripts/test-coverage.sh) && \
        echo "$output" && \
        server_coverage=$(echo "$output" | grep "Server:" | grep -oE "[0-9]+(\.[0-9]+)?") && \
        flutter_coverage=$(echo "$output" | grep "Flutter:" | grep -oE "[0-9]+(\.[0-9]+)?") && \
        echo "" && \
        echo "Coverage threshold: 100%" && \
        echo "" && \
        # Check server coverage
        if [ $(echo "$server_coverage < 100" | bc -l) -eq 1 ]; then
          echo "❌ Server coverage ${server_coverage}% is below 100% threshold"
          exit 1
        else
          echo "✅ Server coverage ${server_coverage}% meets threshold"
        fi && \
        # Check flutter coverage
        if [ $(echo "$flutter_coverage < 100" | bc -l) -eq 1 ]; then
          echo "❌ Flutter coverage ${flutter_coverage}% is below 100% threshold"
          exit 1
        else
          echo "✅ Flutter coverage ${flutter_coverage}% meets threshold"
        fi
      tags: test
    
    trivy-scan-push:
      run: |
        echo "🛡️ Running Trivy security scan before push..." && \
        trivy fs . \
          --exit-code 1 \
          --severity CRITICAL,HIGH,MEDIUM,LOW \
          --format table && \
        echo "✅ Trivy scan complete - no vulnerabilities found"