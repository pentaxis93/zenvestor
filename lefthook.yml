# Lefthook configuration for Zenvestor
# Git hooks for code quality enforcement

pre-commit:
  parallel: false  # Run phases sequentially
  commands:
    # Phase 1: Auto-fix and formatting (runs dart fix and format)
    01-auto-fix-all:
      run: |
        echo "üîß Auto-fixing code issues..." && \
        # Run dart fix first to fix linting issues
        (cd zenvestor_server && dart fix --apply && dart format .) & \
        server_pid=$! && \
        (cd zenvestor_flutter && dart fix --apply && dart format .) & \
        flutter_pid=$! && \
        wait $server_pid && wait $flutter_pid && \
        # Stage all changes made by auto-fix and format
        git add -A && \
        echo "‚úÖ Auto-fix and formatting complete"
      skip:
        - merge
        - rebase
      
    # Phase 2: Static Analysis with strict error checking
    02-analyze-all:
      run: |
        echo "üîç Analyzing code..." && \
        # Run analysis with fatal warnings to block on ANY issue
        server_output=$(cd zenvestor_server && dart analyze --fatal-infos --fatal-warnings 2>&1) && \
        server_exit=$? && \
        flutter_output=$(cd zenvestor_flutter && flutter analyze --fatal-infos --fatal-warnings 2>&1) && \
        flutter_exit=$? && \
        # Show output
        echo "Analyzing zenvestor_server..." && \
        echo "$server_output" && \
        echo "Analyzing zenvestor_flutter..." && \
        echo "$flutter_output" && \
        # Check exit codes
        if [ $server_exit -ne 0 ] || [ $flutter_exit -ne 0 ]; then
          echo "‚ùå Analysis failed - fix all warnings and errors before committing"
          exit 1
        fi && \
        echo "‚úÖ Analysis complete"
      
    # Phase 3: Tests with Coverage
    03-test-all:
      run: |
        echo "üß™ Running tests with coverage..." && \
        output=$(./scripts/test-coverage.sh) && \
        echo "$output" && \
        server_coverage=$(echo "$output" | grep "Server:" | grep -oE "[0-9]+(\.[0-9]+)?") && \
        flutter_coverage=$(echo "$output" | grep "Flutter:" | grep -oE "[0-9]+(\.[0-9]+)?") && \
        echo "" && \
        echo "Coverage threshold: 100%" && \
        echo "" && \
        # Check server coverage
        if [ $(echo "$server_coverage < 100" | bc -l) -eq 1 ]; then
          echo "‚ùå Server coverage ${server_coverage}% is below 100% threshold"
          exit 1
        else
          echo "‚úÖ Server coverage ${server_coverage}% meets threshold"
        fi && \
        # Check flutter coverage
        if [ $(echo "$flutter_coverage < 100" | bc -l) -eq 1 ]; then
          echo "‚ùå Flutter coverage ${flutter_coverage}% is below 100% threshold"
          exit 1
        else
          echo "‚úÖ Flutter coverage ${flutter_coverage}% meets threshold"
        fi && \
        echo "‚úÖ All tests complete"
    
    # Phase 4: Security Scanning with Trivy
    04-trivy-scan:
      run: |
        echo "üõ°Ô∏è Running Trivy security scan..." && \
        trivy fs . \
          --exit-code 1 \
          --severity CRITICAL,HIGH,MEDIUM,LOW \
          --format table && \
        echo "‚úÖ Trivy scan complete - no vulnerabilities found"
    
    # Phase 5: SAST with Semgrep
    05-semgrep-scan:
      run: |
        echo "üîç Running Semgrep SAST scan..." && \
        semgrep \
          --config=p/security-audit \
          --config=p/secrets \
          --config=p/owasp-top-ten \
          --autofix \
          --error && \
        git add -A && \
        echo "‚úÖ Semgrep scan complete - security issues fixed"

# Pre-push hook to run tests with coverage before pushing
# Tests require database to be running via docker-compose
pre-push:
  parallel: false
  commands:
    test-coverage:
      run: |
        echo "üß™ Running tests with coverage..." && \
        output=$(./scripts/test-coverage.sh) && \
        echo "$output" && \
        server_coverage=$(echo "$output" | grep "Server:" | grep -oE "[0-9]+(\.[0-9]+)?") && \
        flutter_coverage=$(echo "$output" | grep "Flutter:" | grep -oE "[0-9]+(\.[0-9]+)?") && \
        echo "" && \
        echo "Coverage threshold: 100%" && \
        echo "" && \
        # Check server coverage
        if [ $(echo "$server_coverage < 100" | bc -l) -eq 1 ]; then
          echo "‚ùå Server coverage ${server_coverage}% is below 100% threshold"
          exit 1
        else
          echo "‚úÖ Server coverage ${server_coverage}% meets threshold"
        fi && \
        # Check flutter coverage
        if [ $(echo "$flutter_coverage < 100" | bc -l) -eq 1 ]; then
          echo "‚ùå Flutter coverage ${flutter_coverage}% is below 100% threshold"
          exit 1
        else
          echo "‚úÖ Flutter coverage ${flutter_coverage}% meets threshold"
        fi
      tags: test
    
    trivy-scan-push:
      run: |
        echo "üõ°Ô∏è Running Trivy security scan before push..." && \
        trivy fs . \
          --exit-code 1 \
          --severity CRITICAL,HIGH,MEDIUM,LOW \
          --format table && \
        echo "‚úÖ Trivy scan complete - no vulnerabilities found"