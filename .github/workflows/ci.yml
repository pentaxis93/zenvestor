name: CI

on:
  push:
    branches: [ '**' ]  # Run on push to any branch
  pull_request:
    branches: [ '**' ]  # Run on PR to any branch
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze-and-test:
    runs-on: ubuntu-latest
    
    # Service containers for database and cache
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: zenvestor_test
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
        ports:
          - 9090:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:6.2.6
        ports:
          - 9091:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_PASSWORD: ${{ secrets.TEST_REDIS_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      # Cache dependencies for faster builds
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/pubspec.lock
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      # Install dependencies
      - name: Install server dependencies
        working-directory: zenvestor_server
        run: dart pub get

      - name: Install Flutter dependencies
        working-directory: zenvestor_flutter
        run: flutter pub get

      # Generate Serverpod code and activate coverage
      - name: Generate Serverpod code and activate coverage
        working-directory: zenvestor_server
        run: |
          dart pub global activate serverpod_cli
          dart pub global activate coverage
          export PATH="$PATH:$HOME/.pub-cache/bin"
          serverpod generate

      # Install bc and lcov for coverage calculations
      - name: Install coverage tools
        run: sudo apt-get update && sudo apt-get install -y bc lcov

      # Make test script executable
      - name: Make test script executable
        run: chmod +x ./scripts/test-coverage.sh

      # Phase 1: Static Analysis
      - name: Analyze server code
        working-directory: zenvestor_server
        run: dart analyze --fatal-infos

      - name: Analyze Flutter code
        working-directory: zenvestor_flutter
        run: flutter analyze --fatal-infos

      # Phase 2: Run Tests with Coverage
      - name: Run tests with coverage check
        run: |
          echo "🧪 Running tests with coverage..."
          output=$(./scripts/test-coverage.sh)
          echo "$output"
          server_coverage=$(echo "$output" | grep "Server:" | grep -oE "[0-9]+(\.[0-9]+)?")
          flutter_coverage=$(echo "$output" | grep "Flutter:" | grep -oE "[0-9]+(\.[0-9]+)?")
          echo ""
          echo "Coverage threshold: 100%"
          echo ""
          # Check server coverage
          if [ $(echo "$server_coverage < 100" | bc -l) -eq 1 ]; then
            echo "❌ Server coverage ${server_coverage}% is below 100% threshold"
            exit 1
          else
            echo "✅ Server coverage ${server_coverage}% meets threshold"
          fi
          # Check flutter coverage
          if [ $(echo "$flutter_coverage < 100" | bc -l) -eq 1 ]; then
            echo "❌ Flutter coverage ${flutter_coverage}% is below 100% threshold"
            exit 1
          else
            echo "✅ Flutter coverage ${flutter_coverage}% meets threshold"
          fi
          echo "✅ All tests complete"
        env:
          # Serverpod uses SERVERPOD_PASSWORD_ prefix for password environment variables
          SERVERPOD_PASSWORD_database: ${{ secrets.TEST_POSTGRES_PASSWORD }}
          SERVERPOD_PASSWORD_redis: ${{ secrets.TEST_REDIS_PASSWORD }}