name: CI

on:
  push:
    branches: [ '**' ]  # Run on push to any branch
  pull_request:
    branches: [ '**' ]  # Run on PR to any branch
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup job that prepares the environment and caches dependencies
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}" >> $GITHUB_OUTPUT

      - name: Setup Zenvestor environment
        uses: ./.github/actions/setup-zenvestor
        with:
          install-coverage-tools: 'true'

  # Parallel job: Analyze server code
  analyze-server:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Zenvestor environment
        uses: ./.github/actions/setup-zenvestor

      - name: Analyze server code
        working-directory: zenvestor_server
        run: dart analyze --fatal-infos --fatal-warnings

  # Parallel job: Analyze Flutter code
  analyze-flutter:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Zenvestor environment
        uses: ./.github/actions/setup-zenvestor

      - name: Analyze Flutter code
        working-directory: zenvestor_flutter
        run: flutter analyze --fatal-infos --fatal-warnings

  # Unified job: Test both server and Flutter code with coverage
  test-coverage:
    needs: setup
    runs-on: ubuntu-latest
    
    # Service containers for database and cache
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: zenvestor_test
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_TEST_PASSWORD }}
        ports:
          - 9090:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:6.2.6
        ports:
          - 9091:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_PASSWORD: ${{ secrets.REDIS_TEST_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Zenvestor environment
        uses: ./.github/actions/setup-zenvestor
        with:
          install-coverage-tools: 'true'

      - name: Run tests with coverage
        run: |
          # Run the coverage script
          output=$(./scripts/test-coverage.sh)
          echo "$output"
          
          # Extract coverage percentages
          server_coverage=$(echo "$output" | grep "Server:" | grep -oE "[0-9]+(\.[0-9]+)?" | head -1)
          flutter_coverage=$(echo "$output" | grep "Flutter:" | grep -oE "[0-9]+(\.[0-9]+)?" | head -1)
          
          echo ""
          echo "Coverage threshold: 100%"
          echo ""
          
          # Check server coverage
          if [ $(echo "$server_coverage < 100" | bc -l) -eq 1 ]; then
            echo "‚ùå Server coverage ${server_coverage}% is below 100% threshold"
            exit 1
          else
            echo "‚úÖ Server coverage ${server_coverage}% meets threshold"
          fi
          
          # Check flutter coverage
          if [ $(echo "$flutter_coverage < 100" | bc -l) -eq 1 ]; then
            echo "‚ùå Flutter coverage ${flutter_coverage}% is below 100% threshold"
            exit 1
          else
            echo "‚úÖ Flutter coverage ${flutter_coverage}% meets threshold"
          fi
        env:
          SERVERPOD_PASSWORD_database: ${{ secrets.POSTGRES_TEST_PASSWORD }}
          SERVERPOD_PASSWORD_redis: ${{ secrets.REDIS_TEST_PASSWORD }}

      - name: Upload server coverage
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: zenvestor_server/coverage/

      - name: Upload Flutter coverage
        uses: actions/upload-artifact@v4
        with:
          name: flutter-coverage
          path: zenvestor_flutter/coverage/

  # Final job: Combine results and generate reports
  coverage-report:
    needs: [analyze-server, analyze-flutter, test-coverage]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-coverage'
          path: coverage-reports

      - name: Generate combined coverage report
        run: |
          echo "## üìä Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Add server coverage if available
          if [ -f "coverage-reports/server-coverage/lcov.info" ]; then
            server_cov=$(lcov --summary coverage-reports/server-coverage/lcov.info 2>/dev/null | grep "lines" | grep -oE "[0-9]+\.[0-9]+%" || echo "0%")
            echo "| Server | $server_cov | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add Flutter coverage if available
          if [ -f "coverage-reports/flutter-coverage/lcov.info" ]; then
            flutter_cov=$(lcov --summary coverage-reports/flutter-coverage/lcov.info 2>/dev/null | grep "lines" | grep -oE "[0-9]+\.[0-9]+%" || echo "0%")
            echo "| Flutter | $flutter_cov | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check job statuses
        run: |
          if [ "${{ needs.analyze-server.result }}" != "success" ] || \
             [ "${{ needs.analyze-flutter.result }}" != "success" ] || \
             [ "${{ needs.test-coverage.result }}" != "success" ]; then
            echo "‚ùå One or more jobs failed"
            exit 1
          else
            echo "‚úÖ All jobs completed successfully"
          fi