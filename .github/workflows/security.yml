name: Security Scan

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual trigger

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Setup job for common preparations
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better secret detection

      - name: Setup Zenvestor environment
        uses: ./.github/actions/setup-zenvestor

  # Parallel job: Secret scanning
  secret-scan:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better secret detection
      
      # Secret Scanning with Gitleaks
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Check for committed secrets files
      - name: Check for committed secrets files
        run: |
          echo "üîç Checking for accidentally committed secret files..."
          found_files=false
          
          if [ -f "zenvestor_server/.env" ]; then
            echo "‚ùå ERROR: Found zenvestor_server/.env"
            found_files=true
          fi
          
          if [ -f "zenvestor_server/config/passwords.yaml" ]; then
            echo "‚ùå ERROR: Found zenvestor_server/config/passwords.yaml"
            found_files=true
          fi
          
          if [ "$found_files" = true ]; then
            echo ""
            echo "Secret files must never be committed to version control!"
            echo "Add them to .gitignore and remove from the repository."
            exit 1
          else
            echo "‚úÖ No secret files found in repository"
          fi

  # Parallel job: Dependency scanning
  dependency-scan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Zenvestor environment
        uses: ./.github/actions/setup-zenvestor

      - name: Check for vulnerable dependencies
        id: dep-scan
        run: |
          echo "üîç Checking for vulnerable dependencies..."

          # Check server dependencies
          cd zenvestor_server
          dart pub outdated --json > ../server-deps.json

          # Check Flutter dependencies
          cd ../zenvestor_flutter
          flutter pub outdated --json > ../flutter-deps.json

          # Parse results (basic check - enhance as needed)
          cd ..
          if grep -q '"isDiscontinued": true' server-deps.json flutter-deps.json; then
            echo "‚ö†Ô∏è Found discontinued packages"
            echo "discontinued_found=true" >> $GITHUB_OUTPUT
          fi

      - name: Activate and run pana
        run: |
          dart pub global activate pana
          export PATH="$PATH:$HOME/.pub-cache/bin"

          echo "üìä Running pana analysis on server..."
          cd zenvestor_server
          pana --no-warning --json > ../server-pana.json || true

          echo "üìä Running pana analysis on Flutter..."
          cd ../zenvestor_flutter
          pana --no-warning --json > ../flutter-pana.json || true

          # Check scores and fail if below threshold
          cd ..
          server_score=$(jq -r '.scores.grantedPoints' server-pana.json 2>/dev/null || echo "0")
          flutter_score=$(jq -r '.scores.grantedPoints' flutter-pana.json 2>/dev/null || echo "0")

          echo "Server pana score: $server_score"
          echo "Flutter pana score: $flutter_score"

          # Store scores for summary
          echo "server_score=$server_score" >> $GITHUB_OUTPUT
          echo "flutter_score=$flutter_score" >> $GITHUB_OUTPUT

  # Parallel job: Trivy vulnerability scanning
  trivy-scan:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '1'  # Block on all severities
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem'

  # Parallel job: SAST with Semgrep
  semgrep-scan:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Semgrep
        run: pip install semgrep
      
      - name: Run Semgrep
        run: |
          semgrep scan \
            --config=p/security-audit --config=p/secrets --config=p/owasp-top-ten \
            --sarif --output=semgrep.sarif .

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'semgrep.sarif'
          category: 'semgrep'

  # Final job: Security summary
  security-summary:
    needs: [secret-scan, dependency-scan, trivy-scan, semgrep-scan]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
    steps:
      - name: Generate security summary
        run: |
          echo "## üõ°Ô∏è Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Secret scan status
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "| Secret Scan | ‚úÖ Pass | No secrets detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Secret Scan | ‚ùå Fail | Secrets or secret files found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Dependency scan status
          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "| Dependency Scan | ‚úÖ Pass | No vulnerable dependencies |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Dependency Scan | ‚ùå Fail | Vulnerable dependencies found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Trivy scan status
          if [ "${{ needs.trivy-scan.result }}" == "success" ]; then
            echo "| Trivy Scan | ‚úÖ Pass | No vulnerabilities detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Trivy Scan | ‚ö†Ô∏è Warn | Vulnerabilities detected (see Security tab) |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Semgrep scan status
          if [ "${{ needs.semgrep-scan.result }}" == "success" ]; then
            echo "| Semgrep SAST | ‚úÖ Pass | No security issues found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Semgrep SAST | ‚ö†Ô∏è Warn | Security issues found (see Security tab) |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Check the Security tab for detailed findings from Trivy and Semgrep" >> $GITHUB_STEP_SUMMARY
          echo "- This scan runs on every push, PR, and weekly on Mondays" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          if [ "${{ needs.secret-scan.result }}" != "success" ] || \
             [ "${{ needs.dependency-scan.result }}" != "success" ]; then
            echo "‚ùå Critical security checks failed"
            exit 1
          else
            echo "‚úÖ All critical security checks passed"
          fi